var AuthManager = require('auth-manager');
var UtilManager = require('util-manager');
var Settings = require('proj-settings');

/* function that contains url and its related fuctions */
var URLManager = (function(){
	
	/* function to generate blogFeedURL based on blogID */
	var generateBlogFeedURL = function(blogID,startIndex){
		var baseURL = "https://www.blogger.com/feeds/";
		baseURL = baseURL.concat(blogID);
		baseURL = baseURL.concat("/posts/default");
		var params = {
			"max-results" : Settings.blog.maxResults,
			"alt" : "json"
		};
		/*if(startIndex != undefined){
			params["start-index"] = startIndex;
		}*/
		var queryString = UtilManager.objToQueryString(params);

		console.log(baseURL.concat(queryString));
		return baseURL.concat(queryString);
	}

	/* function to generate google API url to get blogID */
	var generateAPIURL = function(blogName){
		var baseURL = "https://www.googleapis.com/blogger/v3/blogs/byurl";
		var params  = {
			"key" : AuthManager.getKey(),
			"url" : blogName
		}
		var queryString = UtilManager.objToQueryString(params);
		return baseURL.concat(queryString);
	}

	/* returns filtered result of an entry */
	var parseEntry = function(entry){
	    var obj = {};
	    obj.title = entry.title.$t;
	    obj.images = UtilManager.filterBlogImages(entry.content.$t);
	    //obj.thumbs = JSON.parse(JSON.stringify(obj.images).replace(/s1600/g,"s320")); //can be memory intensive
	    obj.id = entry.id.$t.match(/\d+/g)[1] + "-"+ entry.id.$t.match(/\d+/g)[2];
	    obj.blogID = entry.id.$t.match(/\d+/g)[1];
	    obj.postID = entry.id.$t.match(/\d+/g)[2];
	    obj.published = (new Date(entry.published.$t)).getTime();
	    obj.updated = (new Date(entry.updated.$t)).getTime();
	    if(entry.hasOwnProperty("link")){
	        obj.url = (entry.link[entry.link.length - 1].href);
	    }
	    obj.cleanTitle = UtilManager.removeStopWords(entry.title.$t);
	    if(entry.hasOwnProperty("category"))
	        obj.category = (entry.category[0].hasOwnProperty("term")) ? entry.category[0].term : "";
	    return obj;
	}

	var processBlogPosts = function(obj){
		var feedObj = [];
		if(obj.hasOwnProperty("feed")){
		    obj.feed.entry.forEach(function(element,index){
		        if(element.content.$t !== undefined){
		            feedObj.push(parseEntry(element));
		        }
		    });
		}
		return feedObj;
	}

	return {
		generateBlogFeedURL : generateBlogFeedURL,
		generateAPIURL : generateAPIURL,
		processBlogPosts : processBlogPosts
	}
})();




module.exports = URLManager;